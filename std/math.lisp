(defun + (init @args) (fold (\ (x y) (. x + y)) init args))
(defun - (init @args) (fold (\ (x y) (. x - y)) init args))
(defun * (init @args) (fold (\ (x y) (. x * y)) init args))
(defun / (init @args) (fold (\ (x y) (. x / y)) init args))
(defun mod (x y) (. x % y))

(defun & (x y) (. x & y))
(defun | (x y) (. x | y))
(defun ^ (x y) (. x ^ y))
(defun ~ (x) (. x ~))

(define rb-mth (ruby Math))
(define pi (:: rb-mth PI))
(define e (:: rb-mth E))
(defmacro def-math-primitive (fn) `(defun ,fn (x) (. rb-mth ,fn x)))
(def-math-primitive sin)
(def-math-primitive cos)
(def-math-primitive tan)
(def-math-primitive asin)
(def-math-primitive acos)
(def-math-primitive atan)
(def-math-primitive atan2)
(def-math-primitive sinh)
(def-math-primitive cosh)
(def-math-primitive tanh)
(def-math-primitive asinh)
(def-math-primitive acosh)
(def-math-primitive atanh)
(def-math-primitive erf)
(def-math-primitive erfc)
(def-math-primitive exp)
(def-math-primitive frexp)
(def-math-primitive ldexp)
(def-math-primitive log)
(def-math-primitive log10)
(def-math-primitive sqrt)
