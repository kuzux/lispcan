(define *documentation* (hash-new))
(defun document (fns doc)
  (if (atom? fns)
    (hash-set fns doc *documentation*)
    (map (\ (n) (hash-set n doc *documentation*)) fns)))
    
(defun doc (fn) `(,fn : ,(hash-get fn *documentation*)))
(define help doc)

(document 'document "(fns doc) => Document the function/list of functions fns with the docstring doc")
(document '(doc help) "(fn) => Learn about the function fn")
(document 'defmacro "(name args body) => Define a macro")
(document 'defun "(name args body) => Define a function")
(document 'apply "(fn @args) => Apply a function to args")
(document 'defrmacro "(chr args body) => Define a reader macro")
(document '(lambda \) "(args body) => Create an anonymous closure")
(document 'let1 "(binding body) => Create a local variable")
(document 'let "(bindings body) => Create an arbitrary number of locals")
(document 'progn "(@code) => Evaluate a list of expressions sequentially")
(document 'eval "(@expr) => Evaluate an expression/list of expressions")
(document 'if "(cond then else) => Conditionally execute then or else expression depending on the value of cond")
(document 'read-file "(filename) => Read the contents of the file filename")
(document 'parse "(str) => Parse str as an SExpression")
(document 'load "(filename) => Load and evaluate the contents of a file")
(document '. "(receiver message @args) Send a message to a ruby object with the given arguments")
(document 'ruby "(const) => Access a ruby constant")
(document ':: "(module child) => Access an element in a ruby module")
(document '(quit exit) "() => Simply exit")
(document 'print1 "(arg) => Print the value of a single expression to stdout")
(document 'print "(@args) => Print the values of args to stdout")
(document 'gets "() => Read a single line from stdin")
(document 'define "(name value) => Define a variable name to be value")
(document 'set! "(lhs rhs) => Set the value of a variable that is already defined")

(document 'about "Lispcan, created by kuzux")

